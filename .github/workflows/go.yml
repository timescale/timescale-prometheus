name: Go

on:
  push:
    branches: [master, main, force_test, release-*, staging, trying]
  pull_request:
    branches: ['**']

jobs:

  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build extension image
      run: git clone https://github.com/timescale/promscale_extension && cd promscale_extension && make -f DockerMakefile docker-image

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Format
      run: |
        diff -u <(echo -n) <(gofmt -d .)

    - name: Lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.30.0
        /home/runner/go/bin/golangci-lint run --timeout=5m --skip-dirs=pkg/promql --skip-dirs=pkg/promb

    - name: Build
      run: go build -v ./...

  test:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Test
      run: go test -v -race ./... -timeout 30m > complete-test-run.log  2>&1

    - name: 'Print failure logs'
      if: ${{ failure() }}
      run: grep "^[- F]" complete-test-run.log

    - name: 'Upload Log Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: complete-test-run.log
        path: complete-test-run.log
        retention-days: 5

    - name: Generated
      run: |
        go generate ./...
        git diff --exit-code

  test-end-to-end:
    name: Go End-to-End Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-setups:
        - {name: "Multinode",                shortname: "multinode",    ext: true,  tsdb: true,  tsdb2: true, tsdboss: false, multi: true,  pg: 13}
        - {name: "W/O Promscale Extension",  shortname: "wo-prom-ext",  ext: false, tsdb: true,  tsdb2: true, tsdboss: false, multi: false, pg: 13}
        - {name: "Plain Postgres",           shortname: "plain-pg",     ext: false, tsdb: false, tsdb2: false, tsdboss: false, multi: false, pg: 13}
        - {name: "Timescaledb 1.x (pg 12)",  shortname: "tsdb1x-pg-12", ext: true,  tsdb: true,  tsdb2: false, tsdboss: false, multi: false, pg: 12}
        - {name: "Plain Postgres (12)",      shortname: "plain-pg-12",  ext: false, tsdb: false, tsdb2: false, tsdboss: false, multi: false, pg: 12}
        - {name: "TimescaleDB-OSS (latest)", shortname: "tsdb-oss-latest",  ext: false, tsdb: true, tsdb2: true, tsdboss: true, multi: false, pg: 13}
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Test ${{ matrix.test-setups.name }}
      env:
        EXT: ${{ matrix.test-setups.ext }}
        TSDB: ${{ matrix.test-setups.tsdb }}
        TSDB2: ${{ matrix.test-setups.tsdb2 }}
        MULTI: ${{ matrix.test-setups.multi }}
        PG: ${{ matrix.test-setups.pg }}
        SHORTNAME: ${{ matrix.test-setups.shortname }}
      run: go test ./pkg/tests/end_to_end_tests/ -use-extension=$EXT -use-timescaledb=$TSDB -use-timescale2=$TSDB2 -use-timescaledb-oss=$TSDBOSS -use-multinode=$MULTI -postgres-version-major=$PG > $SHORTNAME-test-run.log  2>&1

    - name: 'Print failure logs'
      if: ${{ failure() }}
      env:
        SHORTNAME: ${{ matrix.test-setups.shortname }}
      run: grep "^[- F]" $SHORTNAME-test-run.log

    - name: 'Upload Log Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.test-setups.shortname }}-test-run.log
        path: ${{ matrix.test-setups.shortname }}-test-run.log
        retention-days: 5



  # Added to summarize the matrix (otherwise we would need to list every single
  # job in bors.toml)
  tests-result:
    name: Go End-to-End Test Results
    if: always()
    needs:
      - test-end-to-end
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.test-end-to-end.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.test-end-to-end.result != 'success'
        run: exit 1